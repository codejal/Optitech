import random

#making random chromosomes
def random_chromosome(size):
    chromosome = []
    for i in range(NUMBER_OF_QUEEN):
        # append a random integer from 1 to NUMBER_OF_QUEEN (both including)
        chromosome.append(random.randint(1, NUMBER_OF_QUEEN))
    return chromosome


def fitness(chromosome):
    # count the total horizontals collisions
    # count same row number for every row number
    # since it will be calculated twice, divide by 2
    horizontal_collisions = sum([chromosome.count(queen)-1 for queen in chromosome])/2
   
    # total diagonal collisions = left + right diagonal collision
    diagonal_collisions = 0

    n = len(chromosome)
    left_diagonal = [0] * 2*n
    right_diagonal = [0] * 2*n
    # for all the 2n-1 diagonals, increase the count if the diagonal has an element
    for i in range(n):
        left_diagonal[i + chromosome[i] - 1] += 1
        right_diagonal[len(chromosome) - i + chromosome[i] - 2] += 1
   
    # left_diagonal[i] and right_diagonal[i] has the count of Queens on diagonal i
    diagonal_collisions = 0
    for i in range(2*n-1):
        counter = 0
        if left_diagonal[i] > 1:
            counter += left_diagonal[i]-1
        if right_diagonal[i] > 1:
            counter += right_diagonal[i]-1
        diagonal_collisions += counter / (n-abs(i-n+1))
    return int(maxFitness - (horizontal_collisions + diagonal_collisions)) #28-(2+3)=23


def probability(chromosome):
    return fitness(chromosome) / maxFitness


def random_pick(population, probabilities):
    populationWithProbabilty = zip(population, probabilities)
    total = sum(w for c, w in populationWithProbabilty)
    r = random.uniform(0, total)
    upto = 0
    for c, w in zip(population, probabilities):
        if upto + w >= r:
            return c
        upto += w
    assert False, "Shouldn't get here"


#doing cross_over between two chromosomes
def reproduce(x, y):
    n = len(x)
    c = random.randint(0, n - 1)
    return x[0:c] + y[c:n]


# randomly changing the value of a random index of a chromosome
def mutate(child):  
    n = len(child)
    # select a random index out of 0 to n-1 (both including)
    index = random.randint(0, n - 1)
    # select a random number out of 1 to n (both including)
    new_value = random.randint(1, n)
    # make the randomly choosen index as randomly choosen number
    child[index] = new_value
    return child


def genetic_queen(population):
    new_population = []
    probabilities = [probability(n) for n in population]
    for i in range(len(population)):
        x = random_pick(population, probabilities) #best chromosome 1
        y = random_pick(population, probabilities) #best chromosome 2
        child = reproduce(x, y) #creating two new chromosomes from the best 2 chromosomes
        if random.random() < mutation_probability:
            child = mutate(child)
        print_chromosome(child)
        new_population.append(child)
        if fitness(child) == maxFitness: break
    return new_population

# function to print the chromosome and fitness value
def print_chromosome(chrom):
    print("Chromosome = {},  Fitness = {}".format(str(chrom), fitness(chrom)))

# function to print the board using the answer chromosome
def print_board(chrom_out):
    # make a nxn board with x
    board = []
    for x in range(NUMBER_OF_QUEEN):
        board.append(["x"] * NUMBER_OF_QUEEN)
    # for all the queen position, make the x->Q
    for i in range(NUMBER_OF_QUEEN):
        board[NUMBER_OF_QUEEN-chrom_out[i]][i]="Q"
    # prin tthe board
    for row in board:
        print (" ".join(row))

if _name_ == "_main_":
    NUMBER_OF_QUEEN = int(input("Enter Number of Queens: ")) #say N = 8
    mutation_probability = 0.1
    maxFitness = (NUMBER_OF_QUEEN*(NUMBER_OF_QUEEN-1))/2  # 8*7/2 = 28
    # create an initial population of size 20
    population = [random_chromosome(NUMBER_OF_QUEEN) for _ in range(10)]
    # current generation
    generation = 1
    # for every chromosome in the population
    # if the fitness of the chromosome is not equal to the max fitness possible
    while not maxFitness in [fitness(chrom) for chrom in population]:
        print("=== Generation", generation, "===")
        population = genetic_queen(population)
        print("")
        print("Maximum Fitness = {}".format(max([fitness(chrom) for chrom in population])))
        generation += 1
    print("Solved in Generation {}!".format(generation-1))
    # since the solution is found in the previous generation
    # iterate on all the chromosomes of current population
    for chrom in population:
        # if the fitness of the current chromosome is equal to the max fitness
        if fitness(chrom) == maxFitness:
            print("\nOne of the solutions: ")
            # print chromosome and fitness
            print_chromosome(chrom)
            # using the current chromosome print the board
            print_board(chrom)